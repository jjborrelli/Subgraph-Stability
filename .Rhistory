}
a.in[nrow(a.in), ncol(a.in)] <- rnorm(1, a.in[evolve.from, evolve.from], .0005)
for(j in 1:nrow(N)){
if(N[j,ncol(N)] < 1){
N[j, ncol(N)] <- 0
r.in[j] <- 0
a.in[j, ] <- 0
a.in[, j] <- 0
}
}
print(iter)
}
N.in <- rlnorm(1, 2)
r.in <- rnorm(1, 1.1, .05)
a.in <- matrix(rnorm(1, -.01, .0005))
#N <- matrix(nrow = 1, ncol = 100)
#N[,1] <- N.in
N <- N.in
for(i in 1:100){
#N[,i] <- N[,i-1] * (r.in + a.in%*%N[,i-1]) + N[,i-1]
N <- N * (r.in + a.in%*%N) + N
}
plot(N[1,], typ = "l")
#Get new species
N.new <- rlnorm(1, 2)
r.new <- rnorm(1, 1.1, .05)
r.in <- c(r.in, r.new)
a.in <- cbind(rbind(a.in, rnorm(1, a.in, .0005)), rnorm(2, a.in, .0005))
asym <- c()
S <- c()
extinct <- vector(length = 0)
for(iter in 1:1000){
N <- rbind(N, 0)
N[nrow(N),ncol(N)] <- N.new
starts <- 1
ends <- 100
for(i in starts:ends){
#N <- cbind(N, N[,i-1] * (r.in + a.in%*%N[,i-1]) + N[,i-1])
N <- N * (r.in + a.in%*%N) + N
}
#Number of species present
S[iter] <- sum(N[,ncol(N)] > 0)
#Get new species
N.new <- rlnorm(1, 2)
r.new <- rnorm(1, 1.1, .05)
r.in <- c(r.in, r.new)
extinct <- which(colSums(a.in) == 0 & rowSums(a.in) == 0)
if(length(extinct) == 0){
evolve.from <- sample(1:nrow(a.in), 1)
}else{
evolve.from <- sample((1:nrow(a.in))[-extinct], 1)
}
if(length(extinct)==0){
numer <- c()
for(ro in 1:nrow(a.in)){
for(co in 1:ncol(a.in)){
numer1 <- abs(a.in[ro,co] - a.in[co,ro]) / abs(a.in[ro,co] + a.in[co,ro])
numer <- c(numer, numer1)
}
}
denom <- nrow(a.in)^2 - nrow(a.in)
asym[iter] <- sum(numer)/denom
}else{
numer <- c()
for(ro in 1:nrow(a.in[-extinct, -extinct])){
for(co in 1:ncol(a.in[-extinct, -extinct])){
numer1 <- abs(a.in[-extinct, -extinct][ro,co] - a.in[-extinct, -extinct][co,ro]) /
abs(a.in[-extinct, -extinct][ro,co] + a.in[-extinct, -extinct][co,ro])
numer <- c(numer, numer1)
}
}
denom <- nrow(a.in[-extinct, -extinct])^2 - nrow(a.in[-extinct, -extinct])
asym[iter] <- sum(numer)/denom
}
#add row
a.in <- rbind(a.in, 0)
#add col
a.in <- cbind(a.in, 0)
for(r in 1:nrow(a.in)){
a.in[r, ncol(a.in)] <- rnorm(1, a.in[r, evolve.from], .0005)
}
for(co in 1:ncol(a.in)){
a.in[nrow(a.in), co] <- rnorm(1, a.in[evolve.from, co], .0005)
}
a.in[nrow(a.in), ncol(a.in)] <- rnorm(1, a.in[evolve.from, evolve.from], .0005)
for(j in 1:nrow(N)){
if(N[j,ncol(N)] < 1){
N[j, ncol(N)] <- 0
r.in[j] <- 0
a.in[j, ] <- 0
a.in[, j] <- 0
}
}
print(iter)
}
N
asym
plot(asym)
#Supplementary Software 5 A possible implementation of the Curveball Algorithm in R programming language
curve_ball<-function(m){
RC=dim(m)
R=RC[1]
C=RC[2]
hp=list()
for (row in 1:dim(m)[1]) {hp[[row]]=(which(m[row,]==1))}
l_hp=length(hp)
for (rep in 1:5*l_hp){
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
L=l_a-l_ab
hp[[AB[1]]] = c(ab,tot[1:L])
hp[[AB[2]]] = c(ab,tot[(L+1):l_tot])}
}
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
rm
}
curving <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(graph.adjacency(newmat)))
mot <- rbind(mot, m)
}
return(mot[-1,])
}
randos <- lapply(web.adj, curving, n = 30000)
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore <- (motfreq - means)/stdevs
#boxplot(zscore)
#library(reshape2)
#library(ggplot2)
ggplot(melt(zscore[,names(sorted)]), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
save.image("C:/Users/jjborrelli/Dropbox/curving.Rdata")
## Null model written by Tim Poisot: https://gist.github.com/tpoisot/2cb1a7b3fe39c790d32b
library(igraph)
library(plyr)
nl <- function(gl) sum(aaply(gl, 1, function(x) x[1] == x[2]))
nd <- function(gl) nrow(gl) - nrow(unique(aaply(gl, 1, sort)))
permut_graph <- function(g){
gl <- get.edgelist(g)
L <- nl(gl)
D <- nd(gl)
N <- nrow(gl)
diff_L <- TRUE
diff_D <- TRUE
diff_N <- TRUE
while(diff_L | diff_D | diff_N)
{
tgl <- gl
tgl[,2] <- sample(tgl[,2])
tgl <- unique(tgl)
diff_L <- nl(tgl) != L
diff_D <- nd(tgl) != D
diff_N <- nrow(tgl) != N
}
return(graph.edgelist(tgl))
}
permuting_tpoi <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newg <- graph.adjacency(adjmat)
for(i in 1:n){
newg2 <- permut_graph(newg)
m <- motif_counter(list(newg2))
mot <- rbind(mot, m)
}
return(mot[-1,])
}
#### Poisot method not working - apply to curve
library(plyr)
nd <- function(gl) nrow(gl) - nrow(unique(aaply(gl, 1, sort)))
dblcan.curve <- function(mat, iter){
mot <- motif_counter(list(graph.adjacency(mat)))
#mot <- matrix(nrow = iter, ncol = 13)
el <- get.edgelist(graph.adjacency(mat))
Ne <- nrow(el)
dbl <- nd(el)
can <- sum(diag(mat))
for(i in 1:iter){
ed = TRUE
dub = TRUE
ca = TRUE
while(ed || dub || ca){
mat2 <- curve_ball(mat)
el2 <- get.edgelist(graph.adjacency(mat2))
el3 <- unique(el2)
Ne2 <- nrow(el3)
dbl2 <- nd(el3)
can2 <- sum(diag(mat2))
ed <- Ne != Ne2
dub <- dbl != dbl2
ca <- can != can2
}
mat <- mat2
mot <- rbind(mot, motif_counter(list(graph.adjacency(mat))))
#mot[i,] <- unlist(motif_counter(list(graph.adjacency(mat))))
}
return(M = mot[-1,])
#return(mot)
}
load("C:/Users/jjborrelli/Desktop/GitHub/Subgraph-Stability/webGRAPHS.Rdata")
web.adj <- lapply(web.graphs, get.adjacency)
web.adj <- lapply(web.graphs, get.adjacency, sparse = F)
library(parallel)
library(doSNOW)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
system.time(
randos.t2 <- parLapply(cl, web.adj, dblcan.curve, iter = 30000)
)
stopCluster(cl)
motif_counter <- function(graph.lists){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
return(motif.data.frame)
}
cl <- makeCluster(detectCores()-1)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
system.time(
randos.t2 <- parLapply(cl, web.adj, dblcan.curve, iter = 30000)
)
stopCluster(cl)
motif_counter
cl <- makeCluster(detectCores()-1)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
?clusterExport
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
library(parallel)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
library("igraph", lib.loc="~/R/win-library/3.1")
require(parallel)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
stopCluster(cl)
library(parallel)
library(doSNOW)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, varlist = c("motif_counter", "curve_ball", "nd", "aaply"))
clusterExport(cl, c("motif_counter", "curve_ball", "nd", "aaply"))
randos.t2 <- parLapply(cl, web.adj, dblcan.curve, iter = 10)
stopCluster(cl)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("motif_counter", "curve_ball", "nd", "aaply"))
stopCluster(cl)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("motif_counter", "curve_ball", "nd", "aaply"))
system.time(
randos.t2 <- parLapply(cl, web.adj, dblcan.curve, iter = 30000)
)
d1 <- data.frame(Temperature = c(53,57,58,63,70,70,75), DamageIndex = c(11,4,4,2,4,4,4))
mod1 <- lm(d1$DamageIndex~d1$Temperature)
mod1
mod1$Coefficients
mod1$coefficients
mod1$coefficients[1]
mod1$coefficients[1]
motif_counter <- function(graph.lists){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
return(motif.data.frame)
}
#Supplementary Software 5 A possible implementation of the Curveball Algorithm in R programming language
curve_ball<-function(m){
RC=dim(m)
R=RC[1]
C=RC[2]
hp=list()
for (row in 1:dim(m)[1]) {hp[[row]]=(which(m[row,]==1))}
l_hp=length(hp)
for (rep in 1:5*l_hp){
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
L=l_a-l_ab
hp[[AB[1]]] = c(ab,tot[1:L])
hp[[AB[2]]] = c(ab,tot[(L+1):l_tot])}
}
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
rm
}
curving <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(graph.adjacency(newmat)))
mot <- rbind(mot, m)
}
return(mot[-1,])
}
library(igraph)
library(plyr)
nl <- function(gl) sum(aaply(gl, 1, function(x) x[1] == x[2]))
nd <- function(gl) nrow(gl) - nrow(unique(aaply(gl, 1, sort)))
permut_graph <- function(g){
gl <- get.edgelist(g)
L <- nl(gl)
D <- nd(gl)
N <- nrow(gl)
diff_L <- TRUE
diff_D <- TRUE
diff_N <- TRUE
while(diff_L | diff_D | diff_N)
{
tgl <- gl
tgl[,2] <- sample(tgl[,2])
tgl <- unique(tgl)
diff_L <- nl(tgl) != L
diff_D <- nd(tgl) != D
diff_N <- nrow(tgl) != N
}
return(graph.edgelist(tgl))
}
permuting_tpoi <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newg <- graph.adjacency(adjmat)
for(i in 1:n){
newg2 <- permut_graph(newg)
m <- motif_counter(list(newg2))
mot <- rbind(mot, m)
}
return(mot[-1,])
}
#### Poisot method not working - apply to curve
library(plyr)
nd <- function(gl) nrow(gl) - nrow(unique(aaply(gl, 1, sort)))
dblcan.curve <- function(mat, iter){
mot <- motif_counter(list(graph.adjacency(mat)))
#mot <- matrix(nrow = iter, ncol = 13)
el <- get.edgelist(graph.adjacency(mat))
Ne <- nrow(el)
dbl <- nd(el)
can <- sum(diag(mat))
for(i in 1:iter){
ed = TRUE
dub = TRUE
ca = TRUE
while(ed || dub || ca){
mat2 <- curve_ball(mat)
el2 <- get.edgelist(graph.adjacency(mat2))
el3 <- unique(el2)
Ne2 <- nrow(el3)
dbl2 <- nd(el3)
can2 <- sum(diag(mat2))
ed <- Ne != Ne2
dub <- dbl != dbl2
ca <- can != can2
}
mat <- mat2
mot <- rbind(mot, motif_counter(list(graph.adjacency(mat))))
#mot[i,] <- unlist(motif_counter(list(graph.adjacency(mat))))
}
return(M = mot[-1,])
#return(mot)
}
load("C:/Users/jjborrelli/Desktop/GitHub/Subgraph-Stability/webGRAPHS.Rdata")
web.adj <- lapply(web.graphs, get.adjacency, sparse = F)
?parLapply
s1<-matrix(c(0,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(0,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(0,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(0,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
s5<-matrix(c(0,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
d1<-matrix(c(0,1,1,-1,0,1,-1,1,0),nrow=3,ncol=3)
d2<-matrix(c(0,1,1,1,0,1,-1,-1,0),nrow=3,ncol=3)
d3<-matrix(c(0,1,-1,1,0,0,1,0,0),nrow=3,ncol=3)
d4<-matrix(c(0,1,1,-1,0,0,1,0,0),nrow=3,ncol=3)
d5<-matrix(c(0,1,1,-1,0,1,1,-1,0),nrow=3,ncol=3)
d6<-matrix(c(0,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(0,1,1,1,0,1,1,-1,0),nrow=3,ncol=3)
d8<-matrix(c(0,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
ran.unif <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, 10)}else if(x==-1){runif(1, -1, 0)} else{0}
})
diag(newmat) <- runif(3, -1, 0)
return(newmat)
}
maxRE <- function(rmat){
lam.max <- max(Re(eigen(rmat)$values))
return(lam.max)
}
eig.analysis <- function(n, matrices){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(0, nrow = rows, ncol = cols)
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif)
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
library(igraph)
library(ggplot2)
library(reshape2)
set.seed(5)
n <- 10000
mot.stab<- eig.analysis(n, mot.lst)
colnames(mot.stab) <- names(mot.lst)
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sorted
library(parallel)
library(doSNOW)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("web.adj", "motif_counter", "curve_ball", "nd", "aaply"))
registerDoSNOW(cl)
system.time(
randos.t3 <- foreach(i = 1:length(web.adj)) %dopar% {
sink(file = paste("C:/Users/jjborrelli/Dropbox/NullRun30/", names(web.adj[i]), ".txt", collapse = ""))
motfreq <- dblcan.curve(web.adj[[i]], iter = 30000)
print(motfreq)
sink()
write.csv(motfreq, file = paste("C:/Users/jjborrelli/Dropbox/NullDat30/", names(web.adj[i]), ".csv", collapse = ""))
return(motfreq)
}
)
stopCluster(cl)
means.t <- t(sapply(randos.t2, colMeans))
stdevs.t <- t(sapply(randos.t2, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore.t <- (motfreq - means.t)/stdevs.t
zscore.t[is.na(zscore.t)] <- 0
#ggplot(melt(zscore.t[,names(sorted)]), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("web.adj", "motif_counter", "curve_ball", "curving"))
registerDoSNOW(cl)
randos <- parLapply(cl, web.adj, curving, n = 30000)
stopCluster(cl)
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore <- (motfreq - means)/stdevs
z1 <- cbind(Mod = factor("curveball"), melt(zscore[,names(sorted)]))
z2 <- cbind(Mod = factor("double"), melt(zscore.t[,names(sorted)]))
z.both <- rbind(z1, z2)
ggplot(z.both, aes(x = variable, y = value, fill = Mod)) + geom_boxplot()
ggsave("C:/Users/jjborrelli/Dropbox/profile-motif.jpeg", height = 5, width = 5, dpi = 700)
means.t <- t(sapply(randos.t3, colMeans))
stdevs.t <- t(sapply(randos.t3, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore.t <- (motfreq - means.t)/stdevs.t
z1 <- cbind(Mod = factor("curveball"), melt(zscore[,names(sorted)]))
z2 <- cbind(Mod = factor("double"), melt(zscore.t[,names(sorted)]))
z.both <- rbind(z1, z2)
ggplot(z.both, aes(x = variable, y = value, fill = Mod)) + geom_boxplot()
ggsave("C:/Users/jjborrelli/Dropbox/profile-motif.jpeg", height = 5, width = 5, dpi = 700)
zscore.t[is.na(zscore.t)] <- 0
zscore[is.na(zscore)] <- 0
z1 <- cbind(Mod = factor("curveball"), melt(zscore[,names(sorted)]))
z2 <- cbind(Mod = factor("double"), melt(zscore.t[,names(sorted)]))
z.both <- rbind(z1, z2)
ggplot(z.both, aes(x = variable, y = value, fill = Mod)) + geom_boxplot()
getwd()
setwd("C:/Users/jjborrelli/Desktop/GitHub/Subgraph-Stability/")
getwd()
save.image("nullMOTIF.Rdata")
means.t <- t(sapply(randos.t3, colMeans))
stdevs.t <- t(sapply(randos.t3, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore.t <- (motfreq - means.t)/stdevs.t
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore <- (motfreq - means)/stdevs
z1 <- cbind(Mod = factor("curveball"), melt(zscore[,names(sorted)]))
z2 <- cbind(Mod = factor("double"), melt(zscore.t[,names(sorted)]))
z.both <- rbind(z1, z2)
ggplot(z.both, aes(x = variable, y = value, fill = Mod)) + geom_boxplot()
