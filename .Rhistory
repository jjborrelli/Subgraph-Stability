for(i in 1:1000){
rows <- sample(1:nrow(df), nrow(df), replace = T)
bootdf <- df[rows,]
fit.boot <- glm(cbind(10000*bootdf[,1], 10000-(10000*bootdf[,1]))~bootdf[,2], family = "binomial")
coef.b[i,] <- fit.boot$fitted.values
}
ci.coef <- apply(coef.b, 2, function(x){quantile(x, c(.025, .975))})
ci.coef
points(ci.coef[1,], col = "red")
points(ci.coef[2,], col = "red")
plot(qssN~rN)
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(ci.coef[1,]~rN, col = "red")
points(ci.coef[2,]~rN, col = "red")
fitN$fitted.values
plot(qssN~rN)
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(sort(coef.b[1,], decreasing = F)~sort(rN, decreasing = F), col = "red")
points(sort(coef.b[2,], decreasing = F)~sort(rN, decreasing = F), col = "red")
plot(qssN~rN)
fitN <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN, family = "binomial")
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
df <- cbind(qssN, rN)
coef.b <- matrix(nrow = 1000, ncol = 5000)
for(i in 1:10000){
rows <- sample(1:nrow(df), nrow(df), replace = T)
bootdf <- df[rows,]
fit.boot <- glm(cbind(10000*bootdf[,1], 10000-(10000*bootdf[,1]))~bootdf[,2], family = "binomial")
coef.b[i,] <- fit.boot$fitted.values
}
ci.coef <- apply(coef.b, 2, function(x){quantile(x, c(.025, .975))})
points(sort(coef.b[1,], decreasing = F)~sort(rN, decreasing = F), col = "red", pch = 18, typ = "o")
points(sort(coef.b[2,], decreasing = F)~sort(rN, decreasing = F), col = "red", pch = 18, typ = "o")
fit.boot
??inv.logit
library(boot)
inv.logit(-2.89)
inv.logit(.09881)
abline(a = .05, b = .55 )
fit.boot$coefficients
df <- cbind(qssN, rN)
coef.b <- matrix(nrow = 1000, ncol = 2)
for(i in 1:10000){
rows <- sample(1:nrow(df), nrow(df), replace = T)
bootdf <- df[rows,]
fit.boot <- glm(cbind(10000*bootdf[,1], 10000-(10000*bootdf[,1]))~bootdf[,2], family = "binomial")
coef.b[i,] <- fit.boot$coefficients
}
df <- cbind(qssN, rN)
coef.b <- matrix(nrow = 10000, ncol = 2)
for(i in 1:10000){
rows <- sample(1:nrow(df), nrow(df), replace = T)
bootdf <- df[rows,]
fit.boot <- glm(cbind(10000*bootdf[,1], 10000-(10000*bootdf[,1]))~bootdf[,2], family = "binomial")
coef.b[i,] <- fit.boot$coefficients
}
ci.coef <- apply(coef.b, 2, function(x){quantile(x, c(.025, .975))})
abline(a = inv.logit(coef.b[1,1]), inv.logit(coef.b[1,2]))
plot(qssN~rN)
abline(a = inv.logit(coef.b[1,1]), inv.logit(coef.b[1,2]))
abline(a = inv.logit(coef.b[2,1]), inv.logit(coef.b[2,2]))
inv.logit(coef.b[2,1])
inv.logit(coef.b[2,2])
inv.logit(coef.b[1,2]
coef.b
coef.b
abline(a = inv.logit(ci.coef[1,1]), inv.logit(ci.coef[1,2]))
abline(a = inv.logit(ci.coef[2,1]), inv.logit(ci.coef[2,2]))
plot(qssN~rN)
inv.logit(ci.coef[1,1])
inv.logit(ci.coef[1,2])
y.low <- c()
y.hi <- c()
for(i in 1:100){
y.low[i] <- inv.logit(ci.coef[1,1] + ci.coef[1,2]*i)
y.hi[i] <- inv.logit(ci.coef[2,1] + ci.coef[2,2]*i)
}
points(y.low, col = "blue")
points(y.hi, col = "blue", typ = "o", pch = 18)
plot(qssN~rN)
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(y.low, col = "blue", typ = "o", pch = 18)
points(y.hi, col = "blue", typ = "o", pch = 18)
ci.coef99 <- apply(coef.b, 2, function(x){quantile(x, c(.005, .995))})
y.low99 <- c()
y.hi99 <- c()
for(i in 1:100){
y.low99[i] <- inv.logit(ci.coef99[1,1] + ci.coef99[1,2]*i)
y.hi99[i] <- inv.logit(ci.coef99[2,1] + ci.coef99[2,2]*i)
}
points(y.low99, col = "purple", typ = "o", pch = 18)
points(y.hi99, col = "purple", typ = "o", pch = 18)
fw.mot <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/motifCOUNTS.csv")
fw.mot
fw.mot <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/motifCOUNTS.csv", row.names = 1)
fw.mot
fw.mot <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/motifCOUNTS.csv", row.names = 2)
fw.mot
fw.mot <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/motifCOUNTS.csv", row.names = 2)[-1,]
fw.mot
fw.mot <- read.csv("https://raw.githubusercontent.com/jjborrelli/Ecological-Networks/master/FoodWebs/Tables/motifCOUNTS.csv", row.names = 2)[,-1]
fw.mot
sum(fw.mot[,c(1,4,5)]+1)/sum(fw.mot[,-c(1,4,5)]+1)
rowSums(fw.mot[,c(1,4,5)]+1)/rowSum(fw.mot[,-c(1,4,5)]+1)
rowSums(fw.mot[,c(1,4,5)]+1)/rowSums(fw.mot[,-c(1,4,5)]+1)
fw.r <- rowSums(fw.mot[,c(1,4,5)]+1)/rowSums(fw.mot[,-c(1,4,5)]+1)
fitN
fitN$coefficients
fw.pred <- inv.logit(fitN$coefficients[1] + fitN$coefficients[2]*fw.r )
points(fw.pred~fw.r, col = "green", pch = 17)
fw.r
sort(fw.r)
load("C:/Users/jjborrelli/Desktop/GitHub/Subgraph-Stability/webGRAPHS.Rdata")
web.adj <- lapply(web.graphs, get.adjacency, sparse = F)
eig.analysis
fw.eig <- eig.analysis(10000, web.adj)
fw.eig
fw.qss <- apply(fw.eig, 2, function(x){sum(x < 0)})
fw.qss
points(fw.qss~fw.r, col = "darkgreen", pch = 17)
fw.r
plot(qssN~rN, xlim = c(0, 531))
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(y.low, col = "blue", typ = "o", pch = 18)
points(y.hi, col = "blue", typ = "o", pch = 18)
points(y.low99, col = "purple", typ = "o", pch = 18)
points(y.hi99, col = "purple", typ = "o", pch = 18)
points(fw.pred~fw.r, col = "green", pch = 17)
points(fw.qss~fw.r, col = "darkgreen", pch = 17)
plot(qssN~rN, xlim = c(0, 531))
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(y.low, col = "blue", typ = "o", pch = 18)
points(y.hi, col = "blue", typ = "o", pch = 18)
points(y.low99, col = "purple", typ = "o", pch = 18)
points(y.hi99, col = "purple", typ = "o", pch = 18)
points(fw.pred~fw.r, col = "green", pch = 17)
points((fw.qss/10000)~fw.r, col = "darkgreen", pch = 17)
qss4
fitr <- glm(cbind(1000*qss4, 1000-(1000*qss4))~mot4, family = "binomial")
summary(fitr)
fitr <- glm(cbind(1000*qss4, 1000-(1000*qss4))~as.matrix(mot4), family = "binomial")
summary(fitr)
stepAIC(fitr)
cor.test(qss, mot4$s1)
cor.test(qss4, mot4$s1)
plot(qss4, mot4$s1)
the.nm <- niche.model(30, .1)
mynm <- the.nm
mymc <- motif_counter(graph.lists = list(graph.adjacency(mynm)))
new1 <- conversion(mynm)
ru <- ran.unif(new1)
ru
ru[upper.tri(ru)]
ru[lower.tri(ru)]
t(ru[lower.tri(ru)])
ru[lower.tri(t(ru))]
ru
new1[upper.tri(new1)]
new1[lower.tri(new1)]
t(new1[lower.tri(new1)])
t(new1[lower.tri(new1)])+new1[upper.tri(new1)]
(new1[lower.tri(new1)]+new1[upper.tri(new1)]
)
new1[lower.tri(t(new1))]+new1[upper.tri(new1)]
new1[lower.tri(t(new1))]
new1[lower.tri(new1)]
new1[upper.tri(new1)]
new1[upper.tri(new1)] == new1[lower.tri(new1)]
new1[upper.tri(new1)] == t(new1)[lower.tri(new1)]
new1[upper.tri(new1)] == -t(new1[lower.tri(new1)]
new1[upper.tri(new1)] == -t(new1[lower.tri(new1)])
new1[upper.tri(new1)] == -t(new1[lower.tri(new1)])
sum(t(new1[upper.tri(new1)]) == -new1[lower.tri(new1)])*
sum(t(new1[upper.tri(new1)]) == -new1[lower.tri(new1)])
sum(t(new1[upper.tri(new1)]) == -new1[lower.tri(new1)])/435
sum(new1[upper.tri(t(new1))] == -new1[lower.tri(new1)])/435
sum(new1[upper.tri(t(new1))] == new1[lower.tri(new1)])/435
fitN <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN, family = "binomial")
summary(fitN)
plot(qssN~rN, xlim = c(0, 531))
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
plot(qssN~rN)
fitN <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN, family = "binomial")
points(sort(fitN$fitted.values, decreasing = F)~sort(rN, decreasing = F), col = "blue", typ = "o")
points(y.low, col = "blue", typ = "o", pch = 18)
points(y.hi, col = "blue", typ = "o", pch = 18)
points(y.low99, col = "purple", typ = "o", pch = 18)
points(y.hi99, col = "purple", typ = "o", pch = 18)
stN <- rowSums(motN[,sample(1:13, 3)])
rand <- sample(1:13, 3)
stN.r <- rowSums(motN[,rand])
nstN.r <- rowSums(motN[,-rand])
rN.r <- (stN.r+1)/(nstN.r+1)
fitN.rand1 <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
points(sort(fitN.rand1$fitted.values, decreasing = F)~sort(rN.r, decreasing = F), col = "blue", typ = "o")
glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")$AIC
?glm
glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")$aic
aic.rand1 <- c()
for(i in 1:10){
rand <- sample(1:13, 3)
stN.r <- rowSums(motN[,rand])
nstN.r <- rowSums(motN[,-rand])
rN.r <- (stN.r+1)/(nstN.r+1)
aic.rand1[i] <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")$aic
}
fitN$aic
hist(aic.rand1)
aic.rand1 <- c()
for(i in 1:100){
rand <- sample(1:13, 3)
stN.r <- rowSums(motN[,rand])
nstN.r <- rowSums(motN[,-rand])
rN.r <- (stN.r+1)/(nstN.r+1)
aic.rand1[i] <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")$aic
}
fitN$aic
hist(aic.rand1)
abline(v = fitN$aic)
sum(aic.rand1 <= fitN$aic)
sum(aic.rand1 <= fitN$aic)/100
combn(1:13, 3)
combin <- combn(1:13, 3)
aic.rand1 <- c()
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r <- (stN.r+1)/(nstN.r+1)
aic.rand1[i] <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")$aic
}
hist(aic.rand1)
abline(v = fitN$aic)
sum(aic.rand1 <= fitN$aic)/length(aic.rand1)
which(aic.rand1 <= fitN$aic)
rand[which(aic.rand1 <= fitN$aic)]
rand[,which(aic.rand1 <= fitN$aic)]
fitval <- matrix(nrow = ncol(rand), ncol = length(rN))
aic.rand1 <- c()
fitval <- matrix(nrow = ncol(rand), ncol = length(rN))
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r <- (stN.r+1)/(nstN.r+1)
fitrand <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
aic.rand1[i] <- fitrand$aic
fitval[i,] <- fitrand$fitted.values
}
fitval
aic.rand1 <- c()
fitval <- matrix(nrow = ncol(rand), ncol = length(rN))
rN.r <- matrix(nrow = ncol(rand), ncal = length(rN))
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r[i,] <- (stN.r+1)/(nstN.r+1)
fitrand <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
aic.rand1[i] <- fitrand$aic
fitval[i,] <- fitrand$fitted.values
}
length(rN)
(stN.r+1)/(nstN.r+1)
aic.rand1 <- c()
fitval <- matrix(nrow = ncol(rand), ncol = 5000)
rN.r <- matrix(nrow = ncol(rand), ncal = length(rN))
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r[i,] <- (stN.r+1)/(nstN.r+1)
fitrand <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
aic.rand1[i] <- fitrand$aic
fitval[i,] <- fitrand$fitted.values
}
aic.rand1 <- c()
fitval <- matrix(nrow = ncol(rand), ncol = 5000)
rN.r <- matrix(nrow = ncol(rand), ncol = length(rN))
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r[i,] <- (stN.r+1)/(nstN.r+1)
fitrand <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r, family = "binomial")
aic.rand1[i] <- fitrand$aic
fitval[i,] <- fitrand$fitted.values
}
aic.rand1 <- c()
fitval <- matrix(nrow = ncol(rand), ncol = 5000)
rN.r <- matrix(nrow = ncol(rand), ncol = length(rN))
rand <- combn(1:13, 3)
for(i in 1:ncol(rand)){
randi <- rand[,i]
stN.r <- rowSums(motN[,randi])
nstN.r <- rowSums(motN[,-randi])
rN.r[i,] <- (stN.r+1)/(nstN.r+1)
fitrand <- glm(cbind(10000*qssN, 10000-(10000*qssN))~rN.r[i,], family = "binomial")
aic.rand1[i] <- fitrand$aic
fitval[i,] <- fitrand$fitted.values
}
plot(fitval[1,]~rN.r[1,])
for(i in 2:ncol(rand)){
points(fitval[i,]~rN.r[i,])
}
points(fitval[i,]~rN.r[i,], ylim = c(0,1), xlim = c(0, 100))
plot(fitval[i,]~rN.r[i,], ylim = c(0,1), xlim = c(0, 100))
for(i in 2:ncol(rand)){
points(fitval[i,]~rN.r[i,])
}
which.min(aic.rand1)
rand[,l107]
rand[,107]
colnames(mot4)[rand[,107]]
plot(fitval[107,]~rN.r[107])
plot(fitval[107,]~rN.r[107,])
plot(fitval[107,]~rN.r[,107])
plot(fitval[107,]~rN.r[107,])
hist(rN.r[107,])
hist(aic.rand1)
log(motN)
head(motN)
colMeans(motN)
log(colMeans(motN))
apply(motN, c(1,2), function(x){if(!x == 0){log(x)}})
apply(motN, c(1,2), function(x){if(!x == 0){log(x)}else{0}})
testN <- apply(motN, c(1,2), function(x){if(!x == 0){log(x)}else{0}})
fit.test <- glm(cbind(1000*myqss, 1000-(1000*myqss))~as.matrix(testN), family = "binomial")
fit.test <- glm(cbind(1000*qssN, 1000-(1000*qssN))~as.matrix(testN), family = "binomial")
qssN
is.matrix(testN)
fit.test <- glm(cbind(1000*qssN, 1000-(1000*qssN))~testN, family = "binomial")
fit.test
testN <- apply(motN, 1, function(x){x/sum(x)})
testN
head(motN)
testN <- apply(as.matrix(motN), 1, function(x){x/sum(x)})
head(testN)
head(t(testN))
head(motN)
13+5+23+11+1+6+25+2+3
13/89
5/89
25/89
testN <- t(apply(as.matrix(motN), 1, function(x){x/sum(x)}))
head(testN)
fit.test <- glm(cbind(1000*qssN, 1000-(1000*qssN))~testN, family = "binomial")
summary(fit.test)
colMeans(testN)
stepAIC(fit.test)
qssN
1000*qssN
fitN <- glm(cbind(10000*qssN, 10000-(10000*qssN))~con+as.matrix(motN), family = "binomial")
fit.test <- glm(cbind(10000*qssN, 10000-(10000*qssN))~testN, family = "binomial")
summary(fit.tes)
summary(fit.test)
stepAIC(fit.test)
summary(fit.test)
setwd("C:/Users/jjborrelli/Desktop/Github/Subgraph-Stability/")
load(paste(getwd(), "webGRAPHS.Rdata", sep = "/"))
webGRAPHS
curving <- function(adjmat, n){
mot <- motif_counter(adjmat)
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(newmat))
mot <- rbind(mot, m)
}
return(mot)
}
niche.model(20, .1)
n <- niche.model(20, .1)
curving(n, 10)
curving <- function(adjmat, n){
mot <- motif_counter(list(adjmat))
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(newmat))
mot <- rbind(mot, m)
}
return(mot)
}
n <- niche.model(20, .1)
curving(n, 10)
curving <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(graph.adjacency(newmat)))
mot <- rbind(mot, m)
}
return(mot)
}
n <- niche.model(20, .1)
curving(n, 10)
randos <- lapply(web.adj, curving, n = 1000)
randos[[1]]
sapply(randos, colMeans)
t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
stdevs
motfreq <- motif_counter(web.graphs)
motfreq
(motfreq - means)/stdevs
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
(motfreq - means)/stdevs
means
zscore <- (motfreq - means)/stdevs
boxplot(zscore)
library(reshape2)
melt(zscore)
library(ggplot2)
ggplot(melt(zscore), aes(x = variable, y = value)) + geom_boxplot()
?geom_boxplot
ggplot(melt(zscore), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
randos <- lapply(web.adj, curving, n = 10000)
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore <- (motfreq - means)/stdevs
boxplot(zscore)
#library(reshape2)
#library(ggplot2)
ggplot(melt(zscore), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
curving <- function(adjmat, n){
mot <- motif_counter(list(graph.adjacency(adjmat)))
newmat <- adjmat
for(i in 1:n){
newmat <- curve_ball(newmat)
m <- motif_counter(list(graph.adjacency(newmat)))
mot <- rbind(mot, m)
}
return(mot[-1,])
}
randos <- lapply(web.adj, curving, n = 30000)
means <- t(sapply(randos, colMeans))
stdevs <- t(sapply(randos, function(x){apply(x, 2, sd)}))
motfreq <- motif_counter(web.graphs)
zscore <- (motfreq - means)/stdevs
#boxplot(zscore)
#library(reshape2)
#library(ggplot2)
ggplot(melt(zscore), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
sorted
s1<-matrix(c(0,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(0,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(0,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(0,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
s5<-matrix(c(0,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
d1<-matrix(c(0,1,1,-1,0,1,-1,1,0),nrow=3,ncol=3)
d2<-matrix(c(0,1,1,1,0,1,-1,-1,0),nrow=3,ncol=3)
d3<-matrix(c(0,1,-1,1,0,0,1,0,0),nrow=3,ncol=3)
d4<-matrix(c(0,1,1,-1,0,0,1,0,0),nrow=3,ncol=3)
d5<-matrix(c(0,1,1,-1,0,1,1,-1,0),nrow=3,ncol=3)
d6<-matrix(c(0,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(0,1,1,1,0,1,1,-1,0),nrow=3,ncol=3)
d8<-matrix(c(0,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
set.seed(5)
n <- 10000
mot.stab<- eig.analysis(n, mot.lst)
colnames(mot.stab) <- names(mot.lst)
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sorted
ggplot(melt(zscore[,names(sorted)]), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
eig.analysis <- function(n, matrices){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(0, nrow = rows, ncol = cols)
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif)
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
ran.unif <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, 10)}else if(x==-1){runif(1, -1, 0)} else{0}
})
diag(newmat) <- runif(3, -1, 0)
return(newmat)
}
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sorted
set.seed(5)
n <- 10000
mot.stab<- eig.analysis(n, mot.lst)
colnames(mot.stab) <- names(mot.lst)
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sorted
ggplot(melt(zscore[,names(sorted)]), aes(x = variable, y = value)) + geom_boxplot(varwidth = T)
zscore
zscore
head(zscore)
sum(zscore[,2]>0)
save.image("C:/Users/jjborrelli/Dropbox/curving.Rdata")
