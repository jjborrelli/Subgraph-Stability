registerDoSNOW(cl)
allweb.df <- data.frame(qss = c(), diam = c(), maxtl = c(), meantl = c(),
medtl = c(), sdtl = c())
RESULTS <- foreach(i = 1:10, .combine = rbind, .init = "allweb.df", .export = c("allpars"), .packages = c("data.table", "igraph", "NetIndices")) %dopar% {
source("Food-Chain-Length/robustnessFUNC.R")
chain <- testLENGTH(webiter = 10, maxchain = 9, totalINT = allpars[i,3],
params = allpars[i,1:2])
chls <- cbind(chain[[1]],
ints = factor(rep(allpars[i, 3], nrow(chain[[1]]))),
pars = factor(rep(paste(allpars[i,1:2], collapse = "/"),
nrow(chain[[1]]))))
itls <- cbind(chain[[2]],
ints = factor(rep(allpars[i, 3], nrow(chain[[2]]))),
pars = factor(rep(paste(allpars[i,1:2], collapse = "/"),
nrow(chain[[2]]))))
allweb.df <- rbind(allweb.df, chls)
write.csv(itls, paste(getwd(), "/Food-Chain-Length/data/",
paste(allpars[i,], collapse = "_"), ".csv", sep = ""))
}
stopCluster(cl)
RESULTS
RESULTS$allweb.df
allweb.df
allweb.df <- data.frame(qss = c(), diam = c(), maxtl = c(), meantl = c(),
medtl = c(), sdtl = c())
allweb.df
test[[1]]
head(test[[1]])
rbind(allweb.df, test[[1]])
cl <- makeCluster(detectCores())
registerDoSNOW(cl)
allweb.df <- data.frame(qss = c(), diam = c(), maxtl = c(), meantl = c(),
medtl = c(), sdtl = c(), ints = c(), pars = c())
RESULTS <- foreach(i = 1:10, .combine = rbind, .init = "allweb.df", .export = c("allpars"), .packages = c("data.table", "igraph", "NetIndices")) %dopar% {
source("Food-Chain-Length/robustnessFUNC.R")
chain <- testLENGTH(webiter = 10, maxchain = 9, totalINT = allpars[i,3],
params = allpars[i,1:2])
chls <- cbind(chain[[1]],
ints = factor(rep(allpars[i, 3], nrow(chain[[1]]))),
pars = factor(rep(paste(allpars[i,1:2], collapse = "/"),
nrow(chain[[1]]))))
itls <- cbind(chain[[2]],
ints = factor(rep(allpars[i, 3], nrow(chain[[2]]))),
pars = factor(rep(paste(allpars[i,1:2], collapse = "/"),
nrow(chain[[2]]))))
allweb.df <- rbind(allweb.df, chls)
write.csv(itls, paste(getwd(), "/Food-Chain-Length/data/",
paste(allpars[i,], collapse = "_"), ".csv", sep = ""))
}
RESULTS
str(RESULTS)
allweb.df
stopCluster(cl)
pars <- data.frame(pred = c(10, 10, 10, 5, 5, 5, 1, 1, 1), prey = c(-1, -5, -10, -1, -5, -10, -1, -5, -10))
ints <- c(12, 16, 20, 24, 28)
allpars <- unique(expand.grid(pars[,1], pars[,2], ints))
allpars
90*9
810*5
45*90
900*9
chd <- read.csv(paste(getwd(), "/Food-Chain-Length/chaindata.csv", sep = ""), row.names = 1)
chd
head(chd)
cor.test(qss~diam, data = chd)
?cor.test
cor.test(chd$qss, chd$diam)
cor.test(chd$qss[chd$pars == "5/-1"], chd$diam[chd$pars == "5/-1"])
chd[chd$pars == "5/-1"]
cor.test(chd$qss[chd$pars == "5/-1",], chd$diam[chd$pars == "5/-1",])
chd[chd$pars == "5/-1",]
cor.test(chd$qss[chd$pars == "5/-1" & ints == 12], chd$diam[chd$pars == "5/-1" & ints == 12])
cor.test(chd$qss[chd$pars == "5/-1" & chd$ints == 12], chd$diam[chd$pars == "5/-1" & chd$ints == 12])
cor.test(chd$qss[chd$pars == "5/-1" & chd$ints == 12], chd$maxtl[chd$pars == "5/-1" & chd$ints == 12])
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
niche.model<-function(S,C){
require(igraph)
connected = FALSE
while(!connected){
new.mat<-matrix(0,nrow=S,ncol=S)
ci<-vector()
niche<-runif(S,0,1)
r<-rbeta(S,1,((1/(2*C))-1))*niche
for(i in 1:S){
ci[i]<-runif(1,r[i]/2,niche[i])
}
r[which(niche==min(niche))]<-.00000001
for(i in 1:S){
for(j in 1:S){
if(niche[j]>(ci[i]-(.5*r[i])) && niche[j]<(ci[i]+.5*r[i])){
new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
connected <- is.connected(graph.adjacency(new.mat))
}
return(new.mat)
}
niche_maker <- function(n, S, C){
niche.list <- list()
for (i in 1:n){
niche.list[[i]]<- niche.model(S, C)
}
return(niche.list)
}
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
plot(gmax, layout = l1)
plot(gmin, layout = l2)
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(runif(10), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:5,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2)
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2)
n1 <- niche_maker(1000, 10, .12)
n2 <- lapply(n1, graph.adjacency)
d <- sapply(n2, diameter)
d
max(d)
gmax <- n2[[which.max(d)]]
gmin <- n2[[which.min(d)]]
library(NetIndices)
tmax <- TrophInd(n1[[which.max(d)]])$TL
tmin <- TrophInd(n1[[which.min(d)]])$TL
E(gmax)$color = "darkslategray"
E(gmax, path = get.diameter(gmax))$color = "blue"
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1)
E(gmin)$color = "darkslategray"
E(gmin, path = get.diameter(gmin))$color = "blue"
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1, edge.arrow.size = .75)
plot(gmax, layout = l1, edge.arrow.size = .25)
l1 <- matrix(c(sample(1:7,10, replace = T), tmax), ncol = 2)
plot(gmax, layout = l1, edge.arrow.size = .25)
plot(gmin, layout = l2, edge.arrow.size = .25)
?plot.igraph
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(runif(10), tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
l2 <- matrix(c(1,2,3,4,5,1,2,3,4,5, tmin), ncol = 2)
plot(gmin, layout = l2, edge.arrow.size = .25, margin = 0)
plot(gmax, layout = l1, edge.arrow.size = .25, margin = 0)
getwd()
load(paste(getwd(), "webGRAPHS.Rdata", sep = "/"))
setwd("C:/Users/jjborrelli/Desktop/Github/Subgraph-Stability/")
load(paste(getwd(), "webGRAPHS.Rdata", sep = "/"))
motfreq <- motif_counter(web.graphs)
motif_counter <- function(graph.lists){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
rownames(motif.data.frame) <- names(graph.lists)
return(motif.data.frame)
}
permutes_rc <- function(mat, iter = 100){
pattern1 <- matrix(c(0,1,1,0), nrow = 2, ncol = 2)
pattern2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
count <- 0
mat.list <- list()
for(i in 1:iter){
mat.list[[i]] <- matrix(0, nrow = nrow(mat), ncol = ncol(mat))
}
while(count < iter){
srow <- sample(1:nrow(mat), 2)
scol <- sample(1:ncol(mat), 2)
test <- mat[srow, scol]
if(sum(test == pattern1) == 4){
count <- count + 1
mat[srow, scol] <- pattern2
mat.list[[count]] <- mat
next
} else if(sum(test == pattern2) == 4){
count <- count + 1
mat[srow, scol] <- pattern1
mat.list[[count]] <- mat
next
} else {next}
}
matrices <- lapply(mat.list, as.matrix)
return(permuted.matrices = matrices)
}
ran.unif <- function(motmat){
newmat <- apply(motmat, c(1,2), function(x){
if(x==1){runif(1, 0, 10)}else if(x==-1){runif(1, -1, 0)} else{0}
})
diag(newmat) <- runif(3, -1, 0)
return(newmat)
}
maxRE <- function(rmat){
lam.max <- max(Re(eigen(rmat)$values))
return(lam.max)
}
eig.analysis <- function(n, matrices){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(0, nrow = rows, ncol = cols)
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif)
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
library(igraph)
library(ggplot2)
library(reshape2)
setwd("C:/Users/jjborrelli/Desktop/Github/Subgraph-Stability/")
mus <- read.csv("permutedmeans.csv", row.names = 1)
sig <- read.csv("permutesd.csv", row.names = 1)
load(paste(getwd(), "webGRAPHS.Rdata", sep = "/"))
motfreq <- motif_counter(web.graphs)
z <- (motfreq - mus)/sig
zmat <- as.matrix(z)
zmat[is.nan(zmat)] <- 0
profile <- apply(zmat, 2, function(x){x/sqrt(rowSums(zmat^2))})
boxplot(profile)
proflie
profile
melt(profile)
ggplot(melt(profile), aes(x = Var2, y = value)) + geom_boxplot()
ggplot(melt(profile[,sorted]), aes(x = Var2, y = value)) + geom_boxplot()
set.seed(5)
n <- 10000
mot.stab<- eig.analysis(n, mot.lst)
colnames(mot.stab) <- names(mot.lst)
s1<-matrix(c(0,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(0,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(0,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(0,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
s5<-matrix(c(0,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
d1<-matrix(c(0,1,1,-1,0,1,-1,1,0),nrow=3,ncol=3)
d2<-matrix(c(0,1,1,1,0,1,-1,-1,0),nrow=3,ncol=3)
d3<-matrix(c(0,1,-1,1,0,0,1,0,0),nrow=3,ncol=3)
d4<-matrix(c(0,1,1,-1,0,0,1,0,0),nrow=3,ncol=3)
d5<-matrix(c(0,1,1,-1,0,1,1,-1,0),nrow=3,ncol=3)
d6<-matrix(c(0,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(0,1,1,1,0,1,1,-1,0),nrow=3,ncol=3)
d8<-matrix(c(0,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
names(mot.lst) <- c("s1", "s2", "s3", "s4", "s5", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8")
set.seed(5)
n <- 10000
mot.stab<- eig.analysis(n, mot.lst)
colnames(mot.stab) <- names(mot.lst)
mot.qss <- apply(mot.stab, 2, function(x){sum(x<0)/n})
sorted <- sort(mot.qss, decreasing = T)
sorted
plot.df <- melt(profile[,names(sorted)])
fplot <- ggplot(plot.df, aes(x = Var2, y = value)) + geom_boxplot()
fplot <- fplot + geom_hline(aes(yintercept = 0), lty = 2, col = "red")
fplot + xlab("Subgraph") + ylab("Frequency")
fplot <- fplot + theme_bw()
fplot + xlab("Subgraph") + ylab("Frequency")
fplot + xlab("Subgraph") + ylab("Normalized Z-score")
sort.df <- melt(sorted)
qssplot <- ggplot(sort.df, aes(x = 1:13, y = value)) + geom_point(shape = 19, size = 3)
qssplot + xlab("Subgraph") + ylab("Quasi Sign-Stability") + scale_x_discrete(limits=names(sorted))
qssplot <- ggplot(sort.df, aes(x = 1:13, y = value)) + geom_point(shape = 19, size = 3) + theme_bw()
qssplot + xlab("Subgraph") + ylab("Quasi Sign-Stability") + scale_x_discrete(limits=names(sorted))
?geom_boxplot
